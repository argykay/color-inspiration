{"version":3,"sources":["components/searchResults.js","components/filterColor.js","components/searchImages.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["SearchResults","props","className","results","map","imageQuery","style","backgroundColor","color","src","urls","small","alt","FilterColor","useState","value","handleChange","e","onchange","target","id","type","checked","onChange","SearchImages","accessKey","setImageQuery","setResults","setValue","url","handleSearch","axios","get","then","response","data","document","getElementsByClassName","display","onKeyPress","key","onClick","backgroundImg","Header","backgroundImage","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.78777c41.chunk.js","sourcesContent":["import React from \"react\";\n\n/**\n * Functional component that renders dynamical components defined in the JSON received from the search request via props.\n * @property {props.results.map((imageQuery)...)} iterates over the collection generating individual elements for each image result.\n */\n\nfunction SearchResults(props) {\n  return (\n    <div className=\"imgSearchResults\">\n      {props.results.map((imageQuery) => (\n        <div className=\"imgSearchResult\">\n          <div\n            className=\"colorCard\"\n            style={{ backgroundColor: imageQuery.color }}\n          >\n            <img\n              src={imageQuery.urls.small}\n              alt=\"image related to your search\"\n            />\n            <div className=\"colorCode\" style={{ backgroundColor: \"white\" }}>\n              {imageQuery.color}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default SearchResults;\n","import React, { useState } from \"react\";\nimport \"../styling/filterColor.css\";\n\n/**\n * Functional component that returns a @type {form} of the color choice filter buttons.\n * It passes the @param {value} to @param {url} in search via props.\n */\n\nconst FilterColor = function (props) {\n  // console.log(\"PROPS: \", props);\n\n  const [value] = useState(\"\");\n\n  const handleChange = (e) => {\n    props.onchange(e.target.value);\n  };\n\n  return (\n    <form className=\"filter\">\n      <p>Filter by color</p>\n      <div className=\"allOptions\">\n        <label className=\"colorOption\" id=\"red\">\n          <input\n            alt=\"red\"\n            className=\"radioColor\"\n            type=\"radio\"\n            value=\"&color=red\"\n            checked={value === \"&color=red\"}\n            onChange={handleChange}\n          />\n        </label>\n        <label className=\"colorOption\" id=\"orange\">\n          <input\n            alt=\"orange\"\n            className=\"radioColor\"\n            type=\"radio\"\n            value=\"&color=orange\"\n            checked={value === \"&color=orange\"}\n            onChange={handleChange}\n          />\n        </label>\n        <label className=\"colorOption\" id=\"yellow\">\n          <input\n            alt=\"yellow\"\n            className=\"radioColor\"\n            type=\"radio\"\n            value=\"&color=yellow\"\n            checked={value === \"&color=yellow\"}\n            onChange={handleChange}\n          />\n        </label>\n        <label className=\"colorOption\" id=\"green\">\n          <input\n            alt=\"green\"\n            className=\"radioColor\"\n            type=\"radio\"\n            value=\"&color=green\"\n            checked={value === \"&color=green\"}\n            onChange={handleChange}\n          />\n        </label>\n        <label className=\"colorOption\" id=\"blue\">\n          <input\n            alt=\"blue\"\n            className=\"radioColor\"\n            type=\"radio\"\n            value=\"&color=blue\"\n            checked={value === \"&color=blue\"}\n            onChange={handleChange}\n          />\n        </label>\n        <label className=\"colorOption\" id=\"purple\">\n          <input\n            alt=\"purple\"\n            className=\"radioColor\"\n            type=\"radio\"\n            value=\"&color=purple\"\n            checked={value === \"&color=purple\"}\n            onChange={handleChange}\n          />\n        </label>\n        <label className=\"colorOption\" id=\"gray\">\n          <input\n            alt=\"gray\"\n            className=\"radioColor\"\n            type=\"radio\"\n            value=\"&color=black_and_white\"\n            checked={value === \"&color=black_and_white\"}\n            onChange={handleChange}\n          />\n        </label>\n        <label className=\"colorOption\">\n          <input\n            alt=\"all\"\n            className=\"radioColor\"\n            type=\"radio\"\n            value=\" \"\n            checked={value === \" \"}\n            onChange={handleChange}\n          />\n        </label>\n      </div>\n    </form>\n  );\n};\nexport default FilterColor;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"../styling/gallery.css\";\nimport SearchResults from \"./searchResults\";\nimport FilterColor from \"./filterColor\";\n\nfunction SearchImages(props) {\n  /**\n   * Functional component that handles search.\n   * @param {accessKey} Unsplash API access key\n   * @param {imageQuery} Word query from the input field\n   * @param {results} JSON containing the array of image objects fetched from the API using the @param {axios} client\n   * @param {value} String specifing the color filtering passed from the {FilterColor} component\n   * @param {url} String concatenation producing the url link used in @property {handleSearch} to request the collection of results\n   */\n\n  const [accessKey] = useState(\"D-kSO736eZUjwrItOKMSW34_hOzMPPx0fF0oTjeXCRI\");\n  const [imageQuery, setImageQuery] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [value, setValue] = useState(\"\");\n\n  const url =\n    \"https://api.unsplash.com/search/photos?page=1&query=\" +\n    imageQuery +\n    \"&client_id=\" +\n    accessKey +\n    \"&per_page=9\" +\n    value;\n\n  const onchange = (color) => {\n    setValue(color);\n    // console.log(\"Form \", value);\n  };\n\n  const handleChange = (e) => {\n    setImageQuery(e.target.value);\n    document.getElementsByClassName(\"imgSearchResults\")[0].style.display =\n      \"flex\";\n  };\n\n  const handleSearch = (e) => {\n    // console.log(\"VALUE \" + value);\n    // console.log(\"URL \" + url);\n\n    axios.get(url).then((response) => {\n      //  console.log(response);\n      setResults(response.data.results);\n    });\n  };\n\n  const resetResults = (e) => {\n    setResults([]);\n  };\n\n  return (\n    <div className=\"searchContainer\">\n      <div className=\"imgSearch\">\n        <input\n          className=\"searchField\"\n          type=\"text\"\n          onChange={handleChange}\n          onKeyPress={(e) => e.key === \"Enter\" && handleSearch(e.target.value)}\n        />\n        <div className=\"close\" onClick={resetResults}>\n          <span className=\"x1\"></span>\n          <span className=\"x2\"></span>\n        </div>\n      </div>\n\n      <FilterColor\n        color={value}\n        onchange={(e) => {\n          onchange(e);\n          handleSearch(e);\n        }}\n        onKeyPress={(e) => e.key === \"Enter\" && handleSearch(e.target.value)}\n      />\n\n      <SearchResults results={results} />\n    </div>\n  );\n}\n\nexport default SearchImages;\n","import React from \"react\";\nimport \"../styling/App.css\";\nimport SearchImages from \"./searchImages\";\n\nconst backgroundImg = {\n  src: \"https://source.unsplash.com/1600x900/?color\",\n  title: \"Search photos for colour inspiration!\",\n};\n\nfunction Header() {\n  return (\n    <div\n      className=\"backImg\"\n      style={{ backgroundImage: `url(\"${backgroundImg.src}\")` }}\n    >\n      <div className=\"titleBanner\">\n        <div>\n          <p>\n            Made with love by{\" \"}\n            <a\n              href=\"https://argykay.github.io/Personal-Website/\"\n              target=\"_blank\"\n            >\n              Konstantina\n            </a>\n            . All photo credits to{\" \"}\n            <a href=\"https://unsplash.com/developers\" target=\"_blank\">\n              Unsplash\n            </a>\n            .\n          </p>\n        </div>\n        <h1 className=\"title\">{backgroundImg.title}</h1>\n        <SearchImages />\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./styling/App.css\";\nimport Header from \"./components/header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}